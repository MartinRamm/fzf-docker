#!/bin/bash

# $1 (Optionally) - if present (value doesn't matter), this test checks if any containers exist. Else, if active (running) containers exis
__docker_pre_test() {
  if [[ -z "$1" ]] && [[ $(docker ps --format '{{.Names}}') ]]; then
    return 0;
  fi

  if [[ ! -z "$1" ]] && [[ $(docker ps -a --format '{{.Names}}') ]]; then
    return 0;
  fi

  echo "No containers found";
  return 1;
}

__docker_images_pre_test() {
  if [[ $(docker images -qa) ]]; then
    return 0;
  fi
  echo "No images found"
  return 1;
}

__docker_compose_pre_test() {
  if [ -z "$1" ]; then
    if [[ $(docker-compose config --services) ]]; then
      return 0;
    fi
    echo "No docker-compose.yml found (or it contains errors). You can pass as the first argument a path to the service declaration file."
    return 1;
  fi

  if [[ $(docker-compose --file $1 config --services) ]]; then
    return 0;
  fi
  echo "Invalid service declaration file $1."
  return 1;
}

#docker restart
dr() {
  if __docker_pre_test; then
    local container=$(docker ps -a --format '{{.Names}}' | fzf)
    if [ ! -z "$container" ]; then
      docker restart $container
      docker logs -f $container --since 1s
    fi
  fi
}

#docker logs
dl() {
  if $(__docker_pre_test "all"); then
    local since=""
    if [ ! -z "$1" ]; then
      since="--since $1"
    fi

    local container=$(docker ps -a --format '{{.Names}}' | fzf)
    if [ ! -z "$container" ]; then
      sh -c "docker logs -f $container $since"
    fi
  fi
}

#docker exec
de() {
  if __docker_pre_test; then
    local name=$(docker ps --format '{{.Names}}' | fzf)

    if [ ! -z "$name" ]; then
      local command="$1"

      if [ -z "$command" ] && [ -f "$HOME/.docker-fuzzy-search-exec" ]; then
        command=$($HOME/.docker-fuzzy-search-exec "$name")
      fi

      if [ -z "$command" ]; then
        local imageName=$(docker inspect --format '{{.Config.Image}}' $name | sed -e 's/:.*$//g') #without version
        case "$imageName" in
          "mysql" | "bitnami/mysql" | "mysql/mysql-server" | "percona" | centos/mysql*)
            command='mysql -uroot -p$MYSQL_ROOT_PASSWORD'
          ;;

          "mongo" | "circleci/mongo")
            command='if [ -z "$MONGO_INITDB_ROOT_USERNAME" ]; then mongo; else mongo -u "$MONGO_INITDB_ROOT_USERNAME" -p "$MONGO_INITDB_ROOT_PASSWORD"; fi'
          ;;
          "bitnami/mongodb")
            command='if [ -z "$MONGODB_USERNAME" ]; then mongo; else mongo -u "$MONGODB_USERNAME" -p "$MONGODB_PASSWORD" "$MONGODB_DATABASE"; fi'
          ;;
          centos/mongodb*)
            command='mongo -u "admin" -p "$MONGODB_ADMIN_PASSWORD" --authenticationDatabase admin'
          ;;

          "redis" | "circleci/redis" | "bitnami/redis" | centos/redis*)
            command='echo -n "Enter DB Number to connect to (^[1-9][0-9]?$): " && read dbNum && redis-cli -n $dbNum'
            if [[ "$imageName" == "bitnami/redis" ]] || [[ "$imageName" == "centos/redis"* ]]; then
              command="if [ -z \$REDIS_PASSWORD ]; then $command; else $command -a \"\$REDIS_PASSWORD\"; fi"
            fi
          ;;

          *)
            command='sh'
            command=" ash; if [ \"\$?\" == \"127\" ]; then $command; fi"
            command="bash; if [ \"\$?\" == \"127\" ]; then $command; fi"
            command=" zsh; if [ \"\$?\" == \"127\" ]; then $command; fi"
        esac

        command="sh -c '$command'"
      fi

      sh -c "docker exec -it $name $command"
    fi
  fi
}

#docker stop
ds() {
  if __docker_pre_test; then
    local names=$(docker ps --format '{{.Names}}' | fzf -m --print0)
    if [ ! -z "$names" ]; then
      docker update --restart=no $names
      docker stop $names
    fi
  fi
}

#docker stop all
dsa() {
  if __docker_pre_test; then
    docker update --restart=no $(docker ps -q)
    docker stop $(docker ps -q)
  fi
}

#docker kill and remove
dk() {
  if $(__docker_pre_test "all"); then
    local names=$(docker ps --format '{{.Names}}' | fzf -m --print0)
    if [ ! -z "$names" ]; then
      docker update --restart=no $names
      docker kill $names
      docker rm $names -f
    fi
  fi
}

#docker kill an remove all
dka() {
  if $(__docker_pre_test "all"); then
    docker update --restart=no $(docker ps -q)
    docker kill $(docker ps -q)
  fi
  if [[ $(docker ps -aq) ]]; then
    docker rm $(docker ps -aq) -f
  fi
}

#docker remove image
drmi() {
  if __docker_images_pre_test; then
    docker images --format "{{.Repository}}:{{.Tag}}" --filter "dangling=false" \
      | fzf -m \
      | while read -r ref; do
          local id=$(docker images --filter "reference=$ref" --format "{{.ID}}")
          docker rmi $id -f
        done
  fi
}

#docker remove all images
drmia() {
  if __docker_images_pre_test; then
    docker rmi $(docker images -qa) -f
  fi
}

#docker clean
dclean() {
  dka
  drmia
}

#docker remove
drm() {
  if $(__docker_pre_test "all"); then
    local names=$(docker ps -aq --format "{{.Names}}" | fzf -m --print0)
    if [ ! -z "$names" ]; then
      docker rm -f $names
    fi
  else
    echo "No containers found"
  fi

}

#docker remove all
drma() {
  if $(__docker_pre_test "all"); then
    docker rm $(docker ps -aq) -f
  else
    echo "No containers found"
  fi
}


#docker compose up
dcu() {
  if __docker_compose_pre_test $1; then
    local fileref=""
    if [ ! -z "$1" ]; then
      fileref="--file $1"
    fi

    local service=$(sh -c "docker-compose $fileref config --services" | fzf -m --print0)
    if [ -z "$service" ]; then
      return 1;
    fi
    sh -c "docker-compose $fileref up -d $service"
  fi
}

#docker compose up all
dcua() {
  if __docker_compose_pre_test $1; then
    local fileref=""
    if [ ! -z "$1" ]; then
      fileref="--file $1"
    fi

    sh -c "docker-compose $fileref up -d"
  fi
}
